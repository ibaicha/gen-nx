import { Action, createReducer, on } from '@ngrx/store'
import { IChargeExploitationState } from './charge_exploitation.model'
import * as fromChargeExploitations from './index'

/**
 * État initial du reducer des charges d'exploitation
 */
export const initialChargeExploitationState: IChargeExploitationState = {
  chargeExploitations: [],
  isLoading: false,
}

/**
 * Reducer principal pour la gestion des charges d'exploitation
 */
const reducer = createReducer<IChargeExploitationState>(
  initialChargeExploitationState,

  /**
   * Gestion des actions de récupération
   */
  on(fromChargeExploitations.getChargeExploitation, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromChargeExploitations.getChargeExploitationSuccess,
    (state, { oneChargeExploitation }) => ({
      ...state,
      isLoading: false,
      oneChargeExploitation,
    }),
  ),

  on(fromChargeExploitations.getChargeExploitations, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromChargeExploitations.getChargeExploitationsSuccess,
    (state, { chargeExploitations }) => ({
      ...state,
      isLoading: false,
      chargeExploitations,
    }),
  ),

  /**
   * Gestion des actions de création
   */
  on(fromChargeExploitations.createChargeExploitation, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromChargeExploitations.createChargeExploitationSuccess,
    (state, { chargeExploitation }) => ({
      ...state,
      chargeExploitations: [...state.chargeExploitations, chargeExploitation],
      isLoading: false,
    }),
  ),

  /**
   * Gestion des actions de mise à jour
   */
  on(fromChargeExploitations.updateChargeExploitation, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromChargeExploitations.updateChargeExploitationSuccess,
    (state, { chargeExploitation }) => ({
      ...state,
      chargeExploitations: state.chargeExploitations.map((item) =>
        item.id === chargeExploitation.id ? chargeExploitation : item,
      ),
      isLoading: false,
    }),
  ),

  /**
   * Gestion des actions de suppression
   */
  on(fromChargeExploitations.deleteChargeExploitation, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromChargeExploitations.deleteChargeExploitationSuccess,
    (state, { chargeExploitation }) => ({
      ...state,
      chargeExploitations: state.chargeExploitations.filter(
        (item) => item.id !== chargeExploitation.id,
      ),
      isLoading: false,
    }),
  ),
)

/**
 * Fonction reducer exportée pour la gestion des charges d'exploitation
 */
export function chargeExploitationReducer(
  state = initialChargeExploitationState,
  actions: Action,
): IChargeExploitationState {
  return reducer(state, actions)
}
