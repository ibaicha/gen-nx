import { Injectable } from '@angular/core'
import { Actions, createEffect, ofType } from '@ngrx/effects'
import { map, switchMap } from 'rxjs/operators'
import * as fromChargeExploitations from './index'
import { ChargeExploitationService } from '../../services/charge-exploitation.service'
import { IChargeExploitation } from '../../interfaces/exploitation.interface'

/**
 * Effets pour la gestion des charges d'exploitation
 * Gère les effets secondaires des actions liées aux charges d'exploitation
 */
@Injectable()
export class ChargeExploitationEffects {
  constructor(
    private readonly actions$: Actions,
    private readonly chargeExploitationService: ChargeExploitationService,
  ) {}

  /**
   * Effet pour récupérer toutes les charges d'exploitation
   * Déclenché par l'action getChargeExploitations
   */
  getChargeExploitations$ = createEffect(() =>
    this.actions$.pipe(
      ofType(fromChargeExploitations.getChargeExploitations.type),
      switchMap(() => this.chargeExploitationService.getChargeExploitations()),
      map((chargeExploitations: IChargeExploitation[]) =>
        fromChargeExploitations.getChargeExploitationsSuccess({
          chargeExploitations,
        }),
      ),
    ),
  )

  /**
   * Effet pour créer une nouvelle charge d'exploitation
   * Déclenché par l'action createChargeExploitation
   */
  createChargeExploitation$ = createEffect(() =>
    this.actions$.pipe(
      ofType(fromChargeExploitations.createChargeExploitation),
      switchMap(({ chargeExploitation }) =>
        this.chargeExploitationService.create(chargeExploitation),
      ),
      map((chargeExploitation: IChargeExploitation) =>
        fromChargeExploitations.createChargeExploitationSuccess({
          chargeExploitation,
        }),
      ),
    ),
  )

  /**
   * Effet pour mettre à jour une charge d'exploitation existante
   * Déclenché par l'action updateChargeExploitation
   */
  updateChargeExploitation$ = createEffect(() =>
    this.actions$.pipe(
      ofType(fromChargeExploitations.updateChargeExploitation),
      switchMap(({ chargeExploitation }) =>
        this.chargeExploitationService.update(chargeExploitation),
      ),
      map((chargeExploitation: IChargeExploitation) =>
        fromChargeExploitations.updateChargeExploitationSuccess({
          chargeExploitation,
        }),
      ),
    ),
  )

  /**
   * Effet pour supprimer une charge d'exploitation
   * Déclenché par l'action deleteChargeExploitation
   */
  deleteChargeExploitation$ = createEffect(() =>
    this.actions$.pipe(
      ofType(fromChargeExploitations.deleteChargeExploitation),
      switchMap(({ chargeExploitation }) =>
        this.chargeExploitationService.delete(chargeExploitation),
      ),
      map((chargeExploitation: IChargeExploitation) =>
        fromChargeExploitations.deleteChargeExploitationSuccess({
          chargeExploitation,
        }),
      ),
    ),
  )
}
