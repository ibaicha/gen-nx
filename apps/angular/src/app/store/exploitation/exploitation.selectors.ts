import { createFeatureSelector, createSelector } from '@ngrx/store'
import { IExploitationState } from './exploitation.model'

/**
 * Sélecteur de base pour l'état des exploitations
 */
export const selectExploitationState =
  createFeatureSelector<IExploitationState>('exploitation')

/**
 * Sélecteur pour obtenir la liste des exploitations
 */
export const selectExploitationsList = createSelector(
  selectExploitationState,
  (state) => state.exploitations,
)

/**
 * Sélecteur pour obtenir l'état de chargement
 */
export const selectExploitationIsLoading = createSelector(
  selectExploitationState,
  (state) => state.isLoading,
)

/**
 * Sélecteur pour obtenir une exploitation par son ID
 */
export const selectExploitationById = (itemId: number) =>
  createSelector(selectExploitationState, (state) =>
    state.exploitations.find((item) => item.id === itemId),
  )

/**
 * Sélecteur pour filtrer et calculer la valeur du compte d'exploitation
 * @param idAnnee - ID de l'année
 * @param idSaison - ID de la saison
 * @param idProduit - ID du produit
 * @returns Le numéro de compte calculé ou null
 */
export const selectExploitationByFilter = (
  idAnnee: number,
  idSaison: number,
  idProduit: number,
) =>
  createSelector(selectExploitationState, (state) => {
    if (!state?.exploitations) return null

    const exploitations = state.exploitations.filter(
      (exploitation) =>
        exploitation.annee?.id === idAnnee &&
        exploitation.saison?.id === idSaison &&
        exploitation.variete?.produit?.id === idProduit,
    )

    if (exploitations.length > 0) {
      // Incrémente la plus grande valeur de compte existante
      return Math.max(...exploitations.map((p) => p.compte)) + 1
    }

    // Génère un nouveau numéro de compte si aucune exploitation n'existe
    return parseInt(`${idAnnee}${idSaison}${idProduit}00001`, 10)
  })
