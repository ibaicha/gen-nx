import { Action, createReducer, on } from '@ngrx/store'
import { IExploitationCustomState } from './exploitationCustom.model'
import * as fromExploitationCustoms from './index'

/**
 * État initial du reducer des exploitations personnalisées
 */
export const initialExploitationCustomState: IExploitationCustomState = {
  exploitationCustoms: [],
  isLoading: false,
}

/**
 * Reducer principal pour la gestion des exploitations personnalisées
 */
const reducer = createReducer<IExploitationCustomState>(
  initialExploitationCustomState,

  /**
   * Gestion des actions de récupération d'une exploitation personnalisée
   */
  on(fromExploitationCustoms.getExploitationCustom, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromExploitationCustoms.getExploitationCustomSuccess,
    (state, { oneExploitationCustom }) => ({
      ...state,
      isLoading: false,
      oneExploitationCustom,
    }),
  ),

  /**
   * Gestion des actions de récupération de toutes les exploitations personnalisées
   */
  on(fromExploitationCustoms.getExploitationCustoms, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromExploitationCustoms.getExploitationCustomsSuccess,
    (state, { exploitationCustoms }) => ({
      ...state,
      isLoading: false,
      exploitationCustoms,
    }),
  ),
)

/**
 * Fonction exportée du reducer pour l'intégration avec le store
 */
export function exploitationCustomReducer(
  state = initialExploitationCustomState,
  actions: Action,
): IExploitationCustomState {
  return reducer(state, actions)
}
