import { Action, createReducer, on } from '@ngrx/store'
import { IExploitationState } from './exploitation.model'
import * as fromExploitations from './index'

/**
 * État initial du reducer des exploitations
 */
export const initialExploitationState: IExploitationState = {
  exploitations: [],
  isLoading: false,
}

/**
 * Reducer principal pour la gestion des exploitations
 */
const reducer = createReducer<IExploitationState>(
  initialExploitationState,

  /**
   * Gestion des actions de récupération
   */
  on(fromExploitations.getExploitation, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromExploitations.getExploitationSuccess,
    (state, { oneExploitation }) => ({
      ...state,
      isLoading: false,
      oneExploitation,
    }),
  ),

  on(fromExploitations.getExploitations, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(fromExploitations.getExploitationsSuccess, (state, { exploitations }) => ({
    ...state,
    isLoading: false,
    exploitations,
  })),

  /**
   * Gestion des actions de création
   */
  on(fromExploitations.createExploitation, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromExploitations.createExploitationSuccess,
    (state, { exploitation }) => ({
      ...state,
      exploitations: [...state.exploitations, exploitation],
      isLoading: false,
    }),
  ),

  /**
   * Gestion des actions de mise à jour
   */
  on(fromExploitations.updateExploitation, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromExploitations.updateExploitationSuccess,
    (state, { exploitation }) => ({
      ...state,
      exploitations: state.exploitations.map((item) =>
        item.id === exploitation.id ? exploitation : item,
      ),
      isLoading: false,
    }),
  ),

  /**
   * Gestion des actions de suppression
   */
  on(fromExploitations.deleteExploitation, (state) => ({
    ...state,
    isLoading: true,
  })),

  on(
    fromExploitations.deleteExploitationSuccess,
    (state, { exploitation }) => ({
      ...state,
      isLoading: false,
      exploitations: state.exploitations.filter(
        (item) => item.id !== exploitation.id,
      ),
    }),
  ),
)

/**
 * Fonction reducer exportée pour être utilisée dans le store
 */
export function exploitationReducer(
  state = initialExploitationState,
  actions: Action,
): IExploitationState {
  return reducer(state, actions)
}
