import { Injectable } from '@angular/core'
import { Actions, createEffect, ofType } from '@ngrx/effects'
import { map, switchMap } from 'rxjs/operators'
import * as fromExploitations from './index'
import { ExploitationService } from '../../services/exploitation.service'
import { IExploitation } from '@shared-models'

/**
 * Effets pour la gestion des exploitations
 * Gère les effets secondaires des actions liées aux exploitations
 */
@Injectable()
export class ExploitationEffects {
  constructor(
    private readonly actions$: Actions,
    private readonly exploitationService: ExploitationService,
  ) {}

  /**
   * Effet pour récupérer toutes les exploitations
   * Déclenché par l'action getExploitations
   */
  getExploitations$ = createEffect(() =>
    this.actions$.pipe(
      ofType(fromExploitations.getExploitations.type),
      switchMap(() => this.exploitationService.getExploitations()),
      map((exploitations: IExploitation[]) =>
        fromExploitations.getExploitationsSuccess({ exploitations }),
      ),
    ),
  )

  /**
   * Effet pour créer une nouvelle exploitation
   * Déclenché par l'action createExploitation
   */
  createExploitation$ = createEffect(() =>
    this.actions$.pipe(
      ofType(fromExploitations.createExploitation),
      switchMap(({ exploitation }) =>
        this.exploitationService.create(exploitation),
      ),
      map((exploitation: IExploitation) =>
        fromExploitations.createExploitationSuccess({ exploitation }),
      ),
    ),
  )

  /**
   * Effet pour mettre à jour une exploitation existante
   * Déclenché par l'action updateExploitation
   */
  updateExploitation$ = createEffect(() =>
    this.actions$.pipe(
      ofType(fromExploitations.updateExploitation),
      switchMap(({ exploitation }) =>
        this.exploitationService.update(exploitation),
      ),
      map((exploitation: IExploitation) =>
        fromExploitations.updateExploitationSuccess({ exploitation }),
      ),
    ),
  )

  /**
   * Effet pour supprimer une exploitation
   * Déclenché par l'action deleteExploitation
   */
  deleteExploitation$ = createEffect(() =>
    this.actions$.pipe(
      ofType(fromExploitations.deleteExploitation),
      switchMap(({ exploitation }) =>
        this.exploitationService.delete(exploitation),
      ),
      map((exploitation: IExploitation) =>
        fromExploitations.deleteExploitationSuccess({ exploitation }),
      ),
    ),
  )
}
