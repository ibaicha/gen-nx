
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  roleId: 'roleId'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  address: 'address',
  userId: 'userId'
};

exports.Prisma.GenreScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.AnneeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  valeur: 'valeur'
};

exports.Prisma.SaisonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.CampagneScalarFieldEnum = {
  id: 'id',
  anneeId: 'anneeId',
  saisonId: 'saisonId'
};

exports.Prisma.FormeJuridiqueScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ActiviteScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PaysScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sigle: 'sigle'
};

exports.Prisma.ZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  paysId: 'paysId'
};

exports.Prisma.LocaliteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sousZoneId: 'sousZoneId',
  departementId: 'departementId'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  paysId: 'paysId'
};

exports.Prisma.DepartementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  regionId: 'regionId'
};

exports.Prisma.PointScalarFieldEnum = {
  id: 'id',
  name: 'name',
  adresse: 'adresse',
  telephone: 'telephone',
  email: 'email',
  latitude: 'latitude',
  longitude: 'longitude',
  isActive: 'isActive',
  isService: 'isService',
  isCollecte: 'isCollecte',
  isTransformation: 'isTransformation',
  isProduit: 'isProduit',
  isIntrant: 'isIntrant',
  isVirtuel: 'isVirtuel',
  societeId: 'societeId',
  localiteId: 'localiteId'
};

exports.Prisma.PointActiviteScalarFieldEnum = {
  id: 'id',
  pointId: 'pointId',
  activiteId: 'activiteId'
};

exports.Prisma.TypeSocieteScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SocieteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sigle: 'sigle',
  email: 'email',
  adresse: 'adresse',
  telephone: 'telephone',
  latitude: 'latitude',
  longitude: 'longitude',
  prenomContact: 'prenomContact',
  nomContact: 'nomContact',
  emailContact: 'emailContact',
  telephoneContact: 'telephoneContact',
  typeSocieteId: 'typeSocieteId',
  formeJuridiqueId: 'formeJuridiqueId'
};

exports.Prisma.SocieteOpScalarFieldEnum = {
  id: 'id',
  compte: 'compte',
  numRegistre: 'numRegistre',
  ninea: 'ninea',
  societeId: 'societeId',
  opId: 'opId'
};

exports.Prisma.AgenceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sigle: 'sigle',
  email: 'email',
  adresse: 'adresse',
  telephone: 'telephone',
  latitude: 'latitude',
  longitude: 'longitude',
  prenomContact: 'prenomContact',
  nomContact: 'nomContact',
  emailContact: 'emailContact',
  telephoneContact: 'telephoneContact',
  societeId: 'societeId'
};

exports.Prisma.AgenceOpScalarFieldEnum = {
  id: 'id',
  agenceId: 'agenceId',
  opId: 'opId',
  pointId: 'pointId'
};

exports.Prisma.PointAgenceScalarFieldEnum = {
  id: 'id',
  pointId: 'pointId',
  agenceId: 'agenceId'
};

exports.Prisma.TypeRemboursementScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RemboursementScalarFieldEnum = {
  id: 'id',
  date: 'date',
  pu: 'pu',
  nombre_unite: 'nombre_unite',
  nombre_emballage: 'nombre_emballage',
  valeur: 'valeur',
  typeRemboursementId: 'typeRemboursementId',
  creditId: 'creditId',
  emballageId: 'emballageId',
  emplacementId: 'emplacementId'
};

exports.Prisma.RemboursementAgenceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  pu: 'pu',
  nombre_unite: 'nombre_unite',
  nombre_emballage: 'nombre_emballage',
  valeur: 'valeur',
  typeRemboursementId: 'typeRemboursementId',
  creditAgenceId: 'creditAgenceId',
  emballageId: 'emballageId',
  emplacementId: 'emplacementId',
  exploitationId: 'exploitationId'
};

exports.Prisma.UniteTransformationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  pointId: 'pointId'
};

exports.Prisma.EntrepotScalarFieldEnum = {
  id: 'id',
  name: 'name',
  adresse: 'adresse',
  pointId: 'pointId'
};

exports.Prisma.EmplacementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  capacite: 'capacite',
  familleEmplacementId: 'familleEmplacementId',
  entrepotId: 'entrepotId'
};

exports.Prisma.FamilleEmplacementScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.TypeEmplacementScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.FiliereScalarFieldEnum = {
  id: 'id',
  name: 'name',
  activiteId: 'activiteId'
};

exports.Prisma.ProduitScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isDerive: 'isDerive',
  isEnsachage: 'isEnsachage',
  isActive: 'isActive',
  filiereId: 'filiereId',
  familleEmplacementId: 'familleEmplacementId'
};

exports.Prisma.VarieteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  surface_unite: 'surface_unite',
  quantite_unite: 'quantite_unite',
  pu_unite: 'pu_unite',
  rendement_unite: 'rendement_unite',
  isActive: 'isActive',
  produitId: 'produitId'
};

exports.Prisma.FamilleTypeServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  activiteId: 'activiteId'
};

exports.Prisma.TypeServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  familleTypeServiceId: 'familleTypeServiceId'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  typeServiceId: 'typeServiceId',
  activiteId: 'activiteId'
};

exports.Prisma.VarianteServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  conditionnement: 'conditionnement',
  quantite: 'quantite',
  pu: 'pu',
  valeur: 'valeur',
  isActive: 'isActive',
  isDefault: 'isDefault',
  serviceId: 'serviceId',
  typeEmballageId: 'typeEmballageId',
  uniteGrandeurId: 'uniteGrandeurId',
  varieteId: 'varieteId'
};

exports.Prisma.PointServiceScalarFieldEnum = {
  id: 'id',
  reference: 'reference',
  pu: 'pu',
  quantiteStock: 'quantiteStock',
  pointId: 'pointId',
  varianteServiceId: 'varianteServiceId'
};

exports.Prisma.DemandeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  date: 'date',
  activiteId: 'activiteId',
  anneeId: 'anneeId',
  saisonId: 'saisonId',
  producteurId: 'producteurId',
  opId: 'opId',
  pointId: 'pointId'
};

exports.Prisma.DemandeDetailScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pu: 'pu',
  quantiteDemandee: 'quantiteDemandee',
  quantiteLivree: 'quantiteLivree',
  quantiteRecue: 'quantiteRecue',
  valeurDemandee: 'valeurDemandee',
  valeurLivree: 'valeurLivree',
  valeurRecue: 'valeurRecue',
  unite: 'unite',
  observation: 'observation',
  pointServiceId: 'pointServiceId',
  demandeId: 'demandeId'
};

exports.Prisma.TypeUniteGrandeurScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UniteGrandeurScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sigle: 'sigle',
  typeUniteGrandeurId: 'typeUniteGrandeurId'
};

exports.Prisma.SurUniteGrandeurScalarFieldEnum = {
  id: 'id',
  name: 'name',
  valeur_reference: 'valeur_reference',
  uniteGrandeurId: 'uniteGrandeurId'
};

exports.Prisma.TypeEmballageScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.EmballageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  conditionnement: 'conditionnement',
  quantite: 'quantite',
  pu: 'pu',
  valeur: 'valeur',
  isActive: 'isActive',
  isDefault: 'isDefault',
  typeEmballageId: 'typeEmballageId',
  uniteGrandeurId: 'uniteGrandeurId'
};

exports.Prisma.EmballageIntrantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  conditionnement: 'conditionnement',
  quantite: 'quantite',
  pu: 'pu',
  valeur: 'valeur',
  isActive: 'isActive',
  isDefault: 'isDefault',
  chargeExploitationId: 'chargeExploitationId',
  typeEmballageId: 'typeEmballageId'
};

exports.Prisma.TypeMouvementIntrantScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ModeEntreeSortieIntrantScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  typeMouvementIntrantId: 'typeMouvementIntrantId'
};

exports.Prisma.MouvementIntrantScalarFieldEnum = {
  id: 'id',
  date: 'date',
  pu: 'pu',
  quantiteEntreeEmballage: 'quantiteEntreeEmballage',
  quantiteSortieEmballage: 'quantiteSortieEmballage',
  nombreUnite: 'nombreUnite',
  valeur: 'valeur',
  lot: 'lot',
  modeEntreeSortieIntrantId: 'modeEntreeSortieIntrantId',
  anneeId: 'anneeId',
  saisonId: 'saisonId',
  chargeExploitationId: 'chargeExploitationId',
  emplacementId: 'emplacementId',
  emplacementSourceId: 'emplacementSourceId',
  emplacementDestinationId: 'emplacementDestinationId',
  opId: 'opId',
  societeId: 'societeId',
  emballageIntrantId: 'emballageIntrantId'
};

exports.Prisma.TypeMouvementStockScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ModeEntreeSortieStockScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  typeMouvementStockId: 'typeMouvementStockId'
};

exports.Prisma.MouvementStockScalarFieldEnum = {
  id: 'id',
  date: 'date',
  pu: 'pu',
  quantiteEntreeEmballage: 'quantiteEntreeEmballage',
  quantiteSortieEmballage: 'quantiteSortieEmballage',
  nombreUnite: 'nombreUnite',
  valeur: 'valeur',
  lot: 'lot',
  opId: 'opId',
  uniteTransformationId: 'uniteTransformationId',
  varieteId: 'varieteId',
  modeEntreeSortieStockId: 'modeEntreeSortieStockId',
  anneeId: 'anneeId',
  saisonId: 'saisonId',
  emplacementId: 'emplacementId',
  emballageId: 'emballageId'
};

exports.Prisma.ProducteurScalarFieldEnum = {
  id: 'id',
  compte: 'compte',
  prenom: 'prenom',
  nom: 'nom',
  cni: 'cni',
  email: 'email',
  telephone: 'telephone',
  adresse: 'adresse',
  latitude: 'latitude',
  longitude: 'longitude',
  isActive: 'isActive',
  genreId: 'genreId',
  localiteId: 'localiteId'
};

exports.Prisma.ProducteurActiviteScalarFieldEnum = {
  id: 'id',
  producteurId: 'producteurId',
  activiteId: 'activiteId'
};

exports.Prisma.OpScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sigle: 'sigle',
  email: 'email',
  telephone: 'telephone',
  adresse: 'adresse',
  latitude: 'latitude',
  longitude: 'longitude',
  prenomContact: 'prenomContact',
  nomContact: 'nomContact',
  emailContact: 'emailContact',
  telephoneContact: 'telephoneContact',
  isActive: 'isActive',
  formeJuridiqueId: 'formeJuridiqueId',
  localiteId: 'localiteId',
  pointId: 'pointId'
};

exports.Prisma.OpProducteurScalarFieldEnum = {
  id: 'id',
  opId: 'opId',
  producteurId: 'producteurId'
};

exports.Prisma.OpActiviteScalarFieldEnum = {
  id: 'id',
  opId: 'opId',
  activiteId: 'activiteId'
};

exports.Prisma.CreditScalarFieldEnum = {
  id: 'id',
  date: 'date',
  capital: 'capital',
  interet: 'interet',
  moratoire: 'moratoire',
  autres_engagements: 'autres_engagements',
  exploitationId: 'exploitationId',
  agenceId: 'agenceId'
};

exports.Prisma.CreditAgenceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  capital: 'capital',
  interet: 'interet',
  moratoire: 'moratoire',
  autres_engagements: 'autres_engagements',
  varieteId: 'varieteId',
  anneeId: 'anneeId',
  saisonId: 'saisonId',
  agenceOpId: 'agenceOpId',
  agenceId: 'agenceId',
  opId: 'opId'
};

exports.Prisma.ExploitationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  compte: 'compte',
  date: 'date',
  unite: 'unite',
  surface: 'surface',
  agenceId: 'agenceId',
  varieteId: 'varieteId',
  anneeId: 'anneeId',
  saisonId: 'saisonId',
  opId: 'opId'
};

exports.Prisma.ExploitationChargeExploitationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  pu: 'pu',
  quantite: 'quantite',
  valeur: 'valeur',
  unite: 'unite',
  date: 'date',
  observation: 'observation',
  exploitationId: 'exploitationId',
  chargeExploitationId: 'chargeExploitationId'
};

exports.Prisma.FamilleTypeChargeExploitationScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.TypeChargeExploitationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  familleTypeChargeExploitationId: 'familleTypeChargeExploitationId'
};

exports.Prisma.FamilleChargeExploitationScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ChargeExploitationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unite: 'unite',
  pu: 'pu',
  quantite_unite_superficie: 'quantite_unite_superficie',
  isAchat: 'isAchat',
  isProduit: 'isProduit',
  isIntrant: 'isIntrant',
  uniteGrandeurId: 'uniteGrandeurId',
  typeChargeExploitationId: 'typeChargeExploitationId',
  familleChargeExploitationId: 'familleChargeExploitationId'
};

exports.Prisma.ProduitChargeExploitationScalarFieldEnum = {
  id: 'id',
  produitId: 'produitId',
  chargeExploitationId: 'chargeExploitationId'
};

exports.Prisma.RecolteScalarFieldEnum = {
  id: 'id',
  date: 'date',
  pu: 'pu',
  nombre_unite: 'nombre_unite',
  nombre_emballage: 'nombre_emballage',
  valeur: 'valeur',
  exploitationId: 'exploitationId',
  varieteId: 'varieteId',
  emballageId: 'emballageId'
};

exports.Prisma.UserZoneScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  zoneId: 'zoneId'
};

exports.Prisma.UserLocaliteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  localiteId: 'localiteId'
};

exports.Prisma.UserPointScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pointId: 'pointId'
};

exports.Prisma.UserOpScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  opId: 'opId'
};

exports.Prisma.UserAgenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agenceId: 'agenceId'
};

exports.Prisma.UserSocieteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  societeId: 'societeId'
};

exports.Prisma.UserProducteurScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  producteurId: 'producteurId'
};

exports.Prisma.SousZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  zoneId: 'zoneId'
};

exports.Prisma.CommuneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  departementId: 'departementId'
};

exports.Prisma.VillageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  communeId: 'communeId',
  localiteId: 'localiteId'
};

exports.Prisma.UserSousZoneScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sousZoneId: 'sousZoneId'
};

exports.Prisma.UserVillageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  villageId: 'villageId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  username: 'username',
  password: 'password'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ProfileOrderByRelevanceFieldEnum = {
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  address: 'address'
};

exports.Prisma.GenreOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.AnneeOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.SaisonOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.FormeJuridiqueOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ActiviteOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.PaysOrderByRelevanceFieldEnum = {
  name: 'name',
  sigle: 'sigle'
};

exports.Prisma.ZoneOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.LocaliteOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.RegionOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.DepartementOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.PointOrderByRelevanceFieldEnum = {
  name: 'name',
  adresse: 'adresse',
  telephone: 'telephone',
  email: 'email'
};

exports.Prisma.TypeSocieteOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.SocieteOrderByRelevanceFieldEnum = {
  name: 'name',
  sigle: 'sigle',
  email: 'email',
  adresse: 'adresse',
  telephone: 'telephone',
  prenomContact: 'prenomContact',
  nomContact: 'nomContact',
  emailContact: 'emailContact',
  telephoneContact: 'telephoneContact'
};

exports.Prisma.SocieteOpOrderByRelevanceFieldEnum = {
  compte: 'compte',
  numRegistre: 'numRegistre',
  ninea: 'ninea'
};

exports.Prisma.AgenceOrderByRelevanceFieldEnum = {
  name: 'name',
  sigle: 'sigle',
  email: 'email',
  adresse: 'adresse',
  telephone: 'telephone',
  prenomContact: 'prenomContact',
  nomContact: 'nomContact',
  emailContact: 'emailContact',
  telephoneContact: 'telephoneContact'
};

exports.Prisma.TypeRemboursementOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.UniteTransformationOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.EntrepotOrderByRelevanceFieldEnum = {
  name: 'name',
  adresse: 'adresse'
};

exports.Prisma.EmplacementOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.FamilleEmplacementOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.TypeEmplacementOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.FiliereOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ProduitOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.VarieteOrderByRelevanceFieldEnum = {
  name: 'name',
  surface_unite: 'surface_unite',
  quantite_unite: 'quantite_unite'
};

exports.Prisma.FamilleTypeServiceOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.TypeServiceOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ServiceOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.VarianteServiceOrderByRelevanceFieldEnum = {
  name: 'name',
  conditionnement: 'conditionnement'
};

exports.Prisma.PointServiceOrderByRelevanceFieldEnum = {
  reference: 'reference'
};

exports.Prisma.DemandeDetailOrderByRelevanceFieldEnum = {
  unite: 'unite',
  observation: 'observation'
};

exports.Prisma.TypeUniteGrandeurOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.UniteGrandeurOrderByRelevanceFieldEnum = {
  name: 'name',
  sigle: 'sigle'
};

exports.Prisma.SurUniteGrandeurOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.TypeEmballageOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.EmballageOrderByRelevanceFieldEnum = {
  name: 'name',
  conditionnement: 'conditionnement'
};

exports.Prisma.EmballageIntrantOrderByRelevanceFieldEnum = {
  name: 'name',
  conditionnement: 'conditionnement'
};

exports.Prisma.TypeMouvementIntrantOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ModeEntreeSortieIntrantOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name'
};

exports.Prisma.MouvementIntrantOrderByRelevanceFieldEnum = {
  lot: 'lot'
};

exports.Prisma.TypeMouvementStockOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ModeEntreeSortieStockOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name'
};

exports.Prisma.MouvementStockOrderByRelevanceFieldEnum = {
  lot: 'lot'
};

exports.Prisma.ProducteurOrderByRelevanceFieldEnum = {
  prenom: 'prenom',
  nom: 'nom',
  cni: 'cni',
  email: 'email',
  telephone: 'telephone',
  adresse: 'adresse'
};

exports.Prisma.OpOrderByRelevanceFieldEnum = {
  name: 'name',
  sigle: 'sigle',
  email: 'email',
  telephone: 'telephone',
  adresse: 'adresse',
  prenomContact: 'prenomContact',
  nomContact: 'nomContact',
  emailContact: 'emailContact',
  telephoneContact: 'telephoneContact'
};

exports.Prisma.ExploitationOrderByRelevanceFieldEnum = {
  unite: 'unite'
};

exports.Prisma.ExploitationChargeExploitationOrderByRelevanceFieldEnum = {
  unite: 'unite',
  observation: 'observation'
};

exports.Prisma.FamilleTypeChargeExploitationOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.TypeChargeExploitationOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.FamilleChargeExploitationOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ChargeExploitationOrderByRelevanceFieldEnum = {
  name: 'name',
  unite: 'unite'
};

exports.Prisma.SousZoneOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.CommuneOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.VillageOrderByRelevanceFieldEnum = {
  name: 'name'
};


exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  Profile: 'Profile',
  Genre: 'Genre',
  Annee: 'Annee',
  Saison: 'Saison',
  Campagne: 'Campagne',
  FormeJuridique: 'FormeJuridique',
  Activite: 'Activite',
  Pays: 'Pays',
  Zone: 'Zone',
  Localite: 'Localite',
  Region: 'Region',
  Departement: 'Departement',
  Point: 'Point',
  PointActivite: 'PointActivite',
  TypeSociete: 'TypeSociete',
  Societe: 'Societe',
  SocieteOp: 'SocieteOp',
  Agence: 'Agence',
  AgenceOp: 'AgenceOp',
  PointAgence: 'PointAgence',
  TypeRemboursement: 'TypeRemboursement',
  Remboursement: 'Remboursement',
  RemboursementAgence: 'RemboursementAgence',
  UniteTransformation: 'UniteTransformation',
  Entrepot: 'Entrepot',
  Emplacement: 'Emplacement',
  FamilleEmplacement: 'FamilleEmplacement',
  TypeEmplacement: 'TypeEmplacement',
  Filiere: 'Filiere',
  Produit: 'Produit',
  Variete: 'Variete',
  FamilleTypeService: 'FamilleTypeService',
  TypeService: 'TypeService',
  Service: 'Service',
  VarianteService: 'VarianteService',
  PointService: 'PointService',
  Demande: 'Demande',
  DemandeDetail: 'DemandeDetail',
  TypeUniteGrandeur: 'TypeUniteGrandeur',
  UniteGrandeur: 'UniteGrandeur',
  SurUniteGrandeur: 'SurUniteGrandeur',
  TypeEmballage: 'TypeEmballage',
  Emballage: 'Emballage',
  EmballageIntrant: 'EmballageIntrant',
  TypeMouvementIntrant: 'TypeMouvementIntrant',
  ModeEntreeSortieIntrant: 'ModeEntreeSortieIntrant',
  MouvementIntrant: 'MouvementIntrant',
  TypeMouvementStock: 'TypeMouvementStock',
  ModeEntreeSortieStock: 'ModeEntreeSortieStock',
  MouvementStock: 'MouvementStock',
  Producteur: 'Producteur',
  ProducteurActivite: 'ProducteurActivite',
  Op: 'Op',
  OpProducteur: 'OpProducteur',
  OpActivite: 'OpActivite',
  Credit: 'Credit',
  CreditAgence: 'CreditAgence',
  Exploitation: 'Exploitation',
  ExploitationChargeExploitation: 'ExploitationChargeExploitation',
  FamilleTypeChargeExploitation: 'FamilleTypeChargeExploitation',
  TypeChargeExploitation: 'TypeChargeExploitation',
  FamilleChargeExploitation: 'FamilleChargeExploitation',
  ChargeExploitation: 'ChargeExploitation',
  ProduitChargeExploitation: 'ProduitChargeExploitation',
  Recolte: 'Recolte',
  UserZone: 'UserZone',
  UserLocalite: 'UserLocalite',
  UserPoint: 'UserPoint',
  UserOp: 'UserOp',
  UserAgence: 'UserAgence',
  UserSociete: 'UserSociete',
  UserProducteur: 'UserProducteur',
  SousZone: 'SousZone',
  Commune: 'Commune',
  Village: 'Village',
  UserSousZone: 'UserSousZone',
  UserVillage: 'UserVillage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
