import {
  ForbiddenException,
  Injectable,
  NotFoundException,
} from '@nestjs/common'
import { PrismaService } from '../../prisma/prisma.service'

import { Prisma } from '@prisma/client'
import {
  CreateExploitationDto,
  UpdateExploitationDto,
} from './exploitation.dto'
import { GetCreditParamsDTO, ICredit } from '../../credits/credit/credit.dto'
import { applyFilters } from '../../utils/filters'

@Injectable()
export class ExploitationService {
  constructor(private readonly prismaService: PrismaService) {}

  async getAll() {
    return this.prismaService.exploitation.findMany({
      select: {
        id: true,
        compte: true,
        date: true,
        unite: true,
        surface: true,
        // createdAt: true,
        // updatedAt:true,
        variete: {
          select: {
            id: true,
            name: true,
            surface_unite: true,
            quantite_unite: true,
            rendement_unite: true,
            isActive: true,
            produit: {
              select: {
                id: true,
                name: true,
              },
            },
          },
        },
        agence: {
          select: {
            id: true,
            name: true,
            sigle: true,
          },
        },
        annee: {
          select: {
            id: true,
            name: true,
            valeur: true,
          },
        },
        saison: {
          select: {
            id: true,
            name: true,
            description: true,
          },
        },
        /*
        producteur: {
          select: {
            id: true,
            compte: true,
            prenom: true,
            nom: true,
            cni: true,
            email: true,
            telephone: true,
            adresse: true,
            isActive: true,
          },
        },
        */
        op: {
          select: {
            id: true,
            name: true,
            sigle: true,
            email: true,
            telephone: true,
            adresse: true,
            prenomContact: true,
            nomContact: true,
            emailContact: true,
            telephoneContact: true,
          },
        },
      },
    })
  }

  formatMontant(montant: number) {
    return montant.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' FCFA'
  }

  async getAllCreditsWithFilters(filtersInput: GetCreditParamsDTO) {
    try {
      interface FilterWhere {
        opId?: { in: number[] }
        anneeId?: { in: number[] }
        saisonId?: { in: number[] }
        agenceId?: { in: number[] }
        societeId?: { in: number[] }
      }
      const where: any = {}

      // Construction des filtres basÃ©e sur le DTO
      if (filtersInput.opId?.length) {
        // Assurer que c'est un tableau de nombres
        const opIds = Array.isArray(filtersInput.opId)
          ? filtersInput.opId.map(Number)
          : [Number(filtersInput.opId)]

        where.opId = { in: opIds }
      }

      if (filtersInput.anneeId?.length) {
        let anneeIds: number[]
        if (Array.isArray(filtersInput.anneeId)) {
          anneeIds = filtersInput.anneeId.map(Number)
        } else {
          anneeIds = [Number(filtersInput.anneeId)]
        }

        where.anneeId = { in: anneeIds }
      }

      if (filtersInput.saisonId?.length) {
        const saisonIds = Array.isArray(filtersInput.saisonId)
          ? filtersInput.saisonId.map(Number)
          : [Number(filtersInput.saisonId)]

        where.saisonId = { in: saisonIds }
      }

      if (filtersInput.agenceId?.length) {
        const agenceIds = Array.isArray(filtersInput.agenceId)
          ? filtersInput.agenceId.map(Number)
          : [Number(filtersInput.agenceId)]

        where.agenceId = { in: agenceIds }
      }

      if (filtersInput.societeId?.length) {
        const societeIds = Array.isArray(filtersInput.societeId)
          ? filtersInput.societeId.map(Number)
          : [Number(filtersInput.societeId)]

        where.agence = {
          ...where.agence,
          societeId: { in: societeIds },
        }
      }
      console.log('where: ', where)
      const creditWithFilters = await this.prismaService.exploitation.findMany({
        where,
        select: {
          id: true,
          compte: true,
          date: true,
          unite: true,
          surface: true,
          saisonId: true,
          saison: {
            select: {
              id: true,
              name: true,
              description: true,
            },
          },
          anneeId: true,
          annee: {
            select: {
              id: true,
              name: true,
              valeur: true,
            },
          },
          varieteId: true,
          variete: {
            select: {
              id: true,
              name: true,
              surface_unite: true,
              quantite_unite: true,
              pu_unite: true,
              rendement_unite: true,
              isActive: true,
              produit: {
                select: {
                  id: true,
                  name: true,
                  isDerive: true,
                  isEnsachage: true,
                  isActive: true,
                  filiere: {
                    select: {
                      id: true,
                      name: true,
                    },
                  },
                  familleEmplacement: {
                    select: {
                      id: true,
                      name: true,
                    },
                  },
                },
              },
            },
          },
          opId: true,
          op: {
            select: {
              id: true,
              name: true,
              sigle: true,
              point: {
                select: {
                  id: true,
                  name: true,
                  PointAgence: {
                    select: {
                      id: true,
                      agence: {
                        select: {
                          id: true,
                          name: true,
                          sigle: true,
                          societe: {
                            select: {
                              id: true,
                              name: true,
                              sigle: true,
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              formeJuridique: {
                select: {
                  id: true,
                  name: true,
                },
              },
            },
          },
          agence: {
            select: {
              id: true,
              name: true,
              sigle: true,
              societe: {
                select: {
                  id: true,
                  name: true,
                  sigle: true,
                },
              },
            },
          },
        },
      })

      const credits: ICredit[] = []
      for (const myCredit of creditWithFilters) {
        // Format dates
        const formattedDates = {
          credit: myCredit.date?.toLocaleDateString('fr-FR') ?? '',
          exploitation: myCredit.date?.toLocaleDateString('fr-FR') ?? '',
        }

        // Get credit details and calculate exigible
        const creditDetails = await this.prismaService.credit.findFirst({
          where: { exploitationId: myCredit.id },
        })

        const amounts = {
          capital: creditDetails?.capital || 0,
          interet: creditDetails?.interet || 0,
          moratoire: creditDetails?.moratoire || 0,
          autres: creditDetails?.autres_engagements || 0,
          exigible: 0,
        }

        amounts.exigible =
          amounts.capital + amounts.interet + amounts.moratoire + amounts.autres
        /*
        // Get remboursements stats
        const remboursements = await this.prismaService.remboursement.findMany({
          where: { exploitationId: myCredit.id },
        })

        const remboursementsStats = {
          count: remboursements.length,
          total: remboursements.reduce((sum, r) => sum + r.valeur, 0),
          taux:
            amounts.exigible > 0
              ? (remboursements.reduce((sum, r) => sum + r.valeur, 0) /
                  amounts.exigible) *
                100
              : 0,
        }

        // Get mouvement stats
        const mouvements = await this.prismaService.mouvementStock.findMany({
          where: {
            opId: myCredit.opId,
            anneeId: myCredit.anneeId,
            saisonId: myCredit.saisonId,
            varieteId: myCredit.varieteId,
          },
        })

        const mouvementsStats = {
          count: mouvements.length,
          total: mouvements.reduce((sum, m) => sum + m.valeur, 0),
          taux:
            amounts.exigible > 0
              ? (mouvements.reduce((sum, m) => sum + m.valeur, 0) /
                  amounts.exigible) *
                100
              : 0,
        }
*/
        // Build credit object
        /*
        credits.push({
          id: myCredit.id,
          dateCredit: formattedDates.credit,

          // Credit amounts
          ...amounts,
          autres_engagements: amounts.autres,

          // Formatted amounts
          capitalFormat: this.formatMontant(amounts.capital),
          interetFormat: this.formatMontant(amounts.interet),
          moratoireFormat: this.formatMontant(amounts.moratoire),
          autres_engagementsFormat: this.formatMontant(amounts.autres),
          exigibleFormat: this.formatMontant(amounts.exigible),

          // Agence info
          agenceId: myCredit.agence?.id,
          agenceName: myCredit.agence?.name,
          agenceSigle: myCredit.agence?.sigle,

          // Societe info
          societeId: myCredit.agence?.societe?.id,
          societeName: myCredit.agence?.societe?.name,
          societeSigle: myCredit.agence?.societe?.sigle,

          // Op info
          exploitationId: myCredit.id,
          exploitationOpId: myCredit.op?.id ?? 0,
          exploitationOpName: myCredit.op?.name ?? '',

          // Point info
          exploitationOpPointId: myCredit.op?.point?.id ?? 0,
          exploitationOpPointName: myCredit.op?.point?.name ?? '',

          // Point Agence info
          exploitationOpPointAgenceId:
            myCredit.op?.point?.PointAgence[0]?.agence?.id ?? 0,
          exploitationOpPointAgenceName:
            myCredit.op?.point?.PointAgence[0]?.agence?.name ?? '',
          exploitationOpPointAgenceSigle:
            myCredit.op?.point?.PointAgence[0]?.agence?.sigle ?? '',

          // Point Agence Societe info
          exploitationOpPointAgenceSocieteId:
            myCredit.op?.point?.PointAgence[0]?.agence?.societe?.id ?? 0,
          exploitationOpPointAgenceSocieteName:
            myCredit.op?.point?.PointAgence[0]?.agence?.societe?.name ?? '',
          exploitationOpPointAgenceSocieteSigle:
            myCredit.op?.point?.PointAgence[0]?.agence?.societe?.sigle ?? '',

          // Type Op info
          exploitationTypeOpId: myCredit.op?.formeJuridique?.id ?? 0,
          exploitationTypeOpName: myCredit.op?.formeJuridique?.name ?? '',

          // Annee/Saison info
          exploitationAnneeId: myCredit.annee.id,
          exploitationAnneeName: myCredit.annee.name,
          exploitationSaisonId: myCredit.saison.id,
          exploitationSaisonName: myCredit.saison.name,

          // Variete/Produit info
          exploitationVarieteId: myCredit?.variete.id,
          exploitationVarieteName: myCredit?.variete.name,
          exploitationProduitId: myCredit?.variete?.produit?.id,
          exploitationProduitName: myCredit?.variete?.produit?.name,

          // Filiere info
          exploitationFiliereId: myCredit?.variete?.produit?.filiere?.id,
          exploitationFiliereName: myCredit?.variete?.produit?.filiere?.name,

          // Famille Emplacement info
          exploitationFamilleEmplacemenId:
            myCredit?.variete?.produit?.familleEmplacement?.id ?? 0,
          exploitationFamilleEmplacementName:
            myCredit?.variete?.produit?.familleEmplacement?.name ?? '',

          // Exploitation details
          exploitationCompte: myCredit.compte,
          exploitationDate: formattedDates.exploitation,
          exploitationUnite: myCredit.unite,
          exploitationSurface: myCredit.surface,

          // Remboursements stats
          remboursementsSum: remboursementsStats.total,
          remboursementsSumFormat: this.formatMontant(
            remboursementsStats.total,
          ),
          remboursementsCount: remboursementsStats.count,
          tauxRemboursement: remboursementsStats.taux,
          tauxRemboursementFormat: remboursementsStats.taux.toFixed(2) + ' %',

          // Mouvement stats
          remboursementsMouvementSum: mouvementsStats.total,
          remboursementsMouvementCount: mouvementsStats.count,
          remboursementsMouvementSumFormat: this.formatMontant(
            mouvementsStats.total,
          ),
          tauxRemboursementMouvement: mouvementsStats.taux,
          tauxRemboursementMouvementFormat:
            mouvementsStats.taux.toFixed(2) + ' %',
        })
        */
      }

      return credits
    } catch (error) {
      throw new ForbiddenException(error)
    } finally {
      await this.prismaService.$disconnect()
    }
  }

  async getAllCreditsWithFiltersValide(filtersInput: any) {
    try {
      const filters: any = {}

      // Filtre pour `opId`
      if (filtersInput.opId) {
        // Assurer que c'est un tableau de nombres
        const opIds = Array.isArray(filtersInput.opId)
          ? filtersInput.opId.map(Number)
          : [Number(filtersInput.opId)]

        filters.opId = { in: opIds }
      }

      // Filtre pour `anneeId`
      if (filtersInput.anneeId) {
        const anneeIds = Array.isArray(filtersInput.anneeId)
          ? filtersInput.anneeId.map(Number)
          : [Number(filtersInput.anneeId)]

        filters.anneeId = { in: anneeIds }
      }

      // Filtre pour `saisonId`
      if (filtersInput.saisonId) {
        const saisonIds = Array.isArray(filtersInput.saisonId)
          ? filtersInput.saisonId.map(Number)
          : [Number(filtersInput.saisonId)]

        filters.saisonId = { in: saisonIds }
      }

      // Filtre pour `agenceId`
      if (filtersInput.agenceId) {
        const agenceIds = Array.isArray(filtersInput.agenceId)
          ? filtersInput.agenceId.map(Number)
          : [Number(filtersInput.agenceId)]

        filters.agenceId = { in: agenceIds }
      }

      // Filtre pour `societeId`
      if (filtersInput.societeId) {
        const societeIds = Array.isArray(filtersInput.societeId)
          ? filtersInput.societeId.map(Number)
          : [Number(filtersInput.societeId)]

        filters.agence = {
          ...filters.agence,
          societeId: { in: societeIds },
        }
      }

      const creditWithFilters = await this.prismaService.exploitation.findMany({
        where: {
          ...filters,
        },

        select: {
          id: true,
          compte: true,
          date: true,
          unite: true,
          surface: true,
          saisonId: true,
          saison: {
            select: {
              id: true,
              name: true,
              description: true,
            },
          },
          anneeId: true,
          annee: {
            select: {
              id: true,
              name: true,
              valeur: true,
            },
          },
          varieteId: true,
          variete: {
            select: {
              id: true,
              name: true,
              surface_unite: true,
              quantite_unite: true,
              rendement_unite: true,
              isActive: true,
              produit: {
                select: {
                  id: true,
                  name: true,
                  filiere: {
                    select: {
                      id: true,
                      name: true,
                    },
                  },
                  familleEmplacement: {
                    select: {
                      id: true,
                      name: true,
                    },
                  },
                },
              },
            },
          },
          opId: true,
          op: {
            select: {
              id: true,
              name: true,
              sigle: true,
              point: {
                select: {
                  id: true,
                  name: true,
                  PointAgence: {
                    select: {
                      id: true,
                      agence: {
                        select: {
                          id: true,
                          name: true,
                          sigle: true,
                          societe: {
                            select: {
                              id: true,
                              name: true,
                              sigle: true,
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
              formeJuridique: {
                select: {
                  id: true,
                  name: true,
                },
              },
            },
          },
          agence: {
            select: {
              id: true,
              name: true,
              sigle: true,
              societe: {
                select: {
                  id: true,
                  name: true,
                  sigle: true,
                },
              },
            },
          },
        },
      })

      const credits: ICredit[] = []

      for (const myCredit of creditWithFilters) {
        const dateObjectCredit = myCredit.date ?? null
        const formattedDateCredit =
          dateObjectCredit?.toLocaleDateString('fr-FR') ?? ''

        const dateObjectDateExploitation = myCredit.date ?? null
        const formattedDateExploitation =
          dateObjectDateExploitation?.toLocaleDateString('fr-FR') ?? ''

        const allCredit = await this.prismaService.credit.findFirst({
          where: { exploitationId: myCredit.id },
        })

        let exigible = 0

        if (allCredit) {
          exigible =
            allCredit.capital +
            allCredit.interet +
            allCredit.moratoire +
            allCredit.autres_engagements
        }
        const allRemboursements: never[] = []
        /*
        const allRemboursements = this.prismaService.remboursement.findMany({
          where: { exploitationId: myCredit.id },
        })
        */

        const mesRemboursementsCount = (await allRemboursements).length
        const mesRemboursementsTotaux = 0
        /*
        const mesRemboursementsTotaux = (await allRemboursements).reduce(
          (sum, remboursement) => sum + remboursement.valeur,
          0,
        )
          */
        let monTauxRemboursement = 0
        if (exigible > 0) {
          monTauxRemboursement = (mesRemboursementsTotaux / exigible) * 100
        }

        const allRemboursementsMouvements =
          this.prismaService.mouvementStock.findMany({
            where: {
              opId: myCredit.opId,
              anneeId: myCredit.anneeId,
              saisonId: myCredit.saisonId,
              varieteId: myCredit.varieteId,
            },
          })
        const mesRemboursementsMouvementsCount = (
          await allRemboursementsMouvements
        ).length
        const mesRemboursementsMouvementsTotaux = (
          await allRemboursementsMouvements
        ).reduce((sum: any, mouvement: { valeur: any }) => sum + mouvement.valeur, 0)

        let monTauxRemboursementMouvement = 0
        if (exigible > 0) {
          monTauxRemboursementMouvement =
            (mesRemboursementsMouvementsTotaux / exigible) * 100
        }

        credits.push({
          id: myCredit.id,
          dateCredit: formattedDateCredit,

          capital: allCredit?.capital || 0,
          interet: allCredit?.interet || 0,
          moratoire: allCredit?.moratoire || 0,
          autres_engagements: allCredit?.autres_engagements || 0,

          exigible: exigible,
          interetFormat: '',
          moratoireFormat: '',
          capitalFormat: '',
          autres_engagementsFormat: '',
          exigibleFormat: '',

          agenceId: myCredit.agence?.id,
          agenceName: myCredit.agence?.name,
          agenceSigle: myCredit.agence?.sigle,

          societeId: myCredit.agence?.societe?.id,
          societeName: myCredit.agence?.societe?.name,
          societeSigle: myCredit.agence?.societe?.sigle,

          exploitationId: myCredit.id,
          exploitationOpId: myCredit.op?.id ?? 0,
          exploitationOpName: myCredit.op?.name ?? '',

          exploitationOpPointId: myCredit.op?.point?.id ?? 0,
          exploitationOpPointName: myCredit.op?.point?.name ?? '',

          exploitationOpPointAgenceId:
            myCredit.op?.point?.PointAgence[0]?.agence?.id ?? 0,
          exploitationOpPointAgenceName:
            myCredit.op?.point?.PointAgence[0]?.agence?.name ?? '',
          exploitationOpPointAgenceSigle:
            myCredit.op?.point?.PointAgence[0]?.agence?.sigle ?? '',

          exploitationOpPointAgenceSocieteId:
            myCredit.op?.point?.PointAgence[0]?.agence?.societe?.id ?? 0,
          exploitationOpPointAgenceSocieteName:
            myCredit.op?.point?.PointAgence[0]?.agence?.societe?.name ?? '',
          exploitationOpPointAgenceSocieteSigle:
            myCredit.op?.point?.PointAgence[0]?.agence?.societe?.sigle ?? '',

          exploitationTypeOpId: myCredit.op?.formeJuridique?.id ?? 0,
          exploitationTypeOpName: myCredit.op?.formeJuridique?.name ?? '',

          exploitationAnneeId: myCredit.annee.id,
          exploitationAnneeName: myCredit.annee.name,
          exploitationSaisonId: myCredit.saison.id,
          exploitationSaisonName: myCredit.saison.name,

          exploitationVarieteId: myCredit?.variete.id,
          exploitationVarieteName: myCredit?.variete.name,
          exploitationProduitId: myCredit?.variete?.produit?.id,
          exploitationProduitName: myCredit?.variete?.produit?.name,

          exploitationFiliereId: myCredit?.variete?.produit?.filiere?.id,
          exploitationFiliereName: myCredit?.variete?.produit?.filiere?.name,

          exploitationFamilleEmplacemenId:
            myCredit?.variete?.produit?.familleEmplacement?.id ?? 0,
          exploitationFamilleEmplacementName:
            myCredit?.variete?.produit?.familleEmplacement?.name ?? '',

          exploitationCompte: myCredit.compte,
          exploitationDate: formattedDateExploitation,
          exploitationUnite: myCredit.unite,
          exploitationSurface: myCredit.surface,

          remboursementsSum: mesRemboursementsTotaux,
          remboursementsSumFormat: this.formatMontant(mesRemboursementsTotaux),
          remboursementsCount: mesRemboursementsCount,
          tauxRemboursement: monTauxRemboursement,
          tauxRemboursementFormat: monTauxRemboursement.toFixed(2) + ' %',

          remboursementsMouvementSum: mesRemboursementsMouvementsTotaux,
          remboursementsMouvementCount: mesRemboursementsMouvementsCount,
          remboursementsMouvementSumFormat: this.formatMontant(
            mesRemboursementsMouvementsTotaux,
          ),
          tauxRemboursementMouvement: monTauxRemboursementMouvement,
          tauxRemboursementMouvementFormat:
            monTauxRemboursementMouvement.toFixed(2) + ' %',
        })
      }

      return credits
    } catch (error) {
      throw new ForbiddenException(error)
    } finally {
      await this.prismaService.$disconnect()
    }
  }

  async getAllCustom() {
    return this.prismaService.exploitation.findMany({
      select: {
        id: true,
        compte: true,
        date: true,
        unite: true,
        surface: true,
        // createdAt: true,
        // updatedAt:true,
        variete: {
          include: {
            produit: {
              include: {},
            },
          },
        },
        annee: {
          include: {},
        },
        saison: {
          include: {},
        },

        op: {
          include: {},
        },
        /*
        Remboursement: {
          include: {
            emballage: {
              include: {
                typeEmballage: {
                  include: {},
                },
                uniteGrandeur: {
                  include: {},
                },
              },
            },
          },
        },
        */
        Recolte: {
          include: {
            emballage: {
              include: {
                typeEmballage: {
                  include: {},
                },
                uniteGrandeur: {
                  include: {},
                },
              },
            },
          },
        },

        ExploitationChargeExploitation: {
          include: {},
        },

        Credit: {
          include: {},
        },
      },
    })
  }

  async getOne(exploitationId: number) {
    return this.prismaService.exploitation.findMany({
      select: {
        id: true,
        compte: true,
        date: true,
        unite: true,
        surface: true,
        // createdAt: true,
        // updatedAt:true,
        variete: {
          include: {},
        },
        annee: {
          include: {},
        },
        saison: {
          include: {},
        },

        op: {
          include: {},
        },
        /*
        Remboursement: {
          include: {},
        },
        */
        /*
                    recoltes:{
                        include: {}
                    },

                    exploitationChargeExploitations:{
                        include:{}
                    },
                    */
        Credit: {
          include: {},
        },
      },
      where: { id: exploitationId },
    })
  }

  async create(createExploitationDto: CreateExploitationDto) {
    const {
      compte,
      date,
      unite,
      surface,
      agenceId,
      varieteId,
      anneeId,
      saisonId,
      producteurId,
      opId,
    } = createExploitationDto
    await this.prismaService.exploitation.create({
      data: {
        compte,
        date,
        unite,
        surface,
        agenceId,
        varieteId,
        anneeId,
        saisonId,

        opId,
      },
    })
    return { data: 'Exploitation created' }
  }

  async update(
    exploitationId: number,
    updateExploitationDto: UpdateExploitationDto,
  ) {
    const exploitation = await this.prismaService.exploitation.findUnique({
      where: { id: exploitationId },
    })
    if (!exploitation) throw new NotFoundException('Exploitation not found')
    await this.prismaService.exploitation.update({
      where: { id: exploitationId },
      data: { ...updateExploitationDto },
    })
    return { data: 'Exploitation updeted!' }
  }

  async delete(exploitationId: number) {
    const exploitation = await this.prismaService.exploitation.findUnique({
      where: { id: exploitationId },
    })
    if (!exploitation) throw new NotFoundException('Post not found')
    await this.prismaService.exploitation.delete({
      where: { id: exploitationId },
    })
    return { data: 'Exploitation deleted' }
  }
}
