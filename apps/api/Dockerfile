# √âtape 1 : Build de l'application
FROM node:22-alpine AS base

# Installer les d√©pendances syst√®me n√©cessaires avec apk (gestionnaire Alpine)
RUN apk add --no-cache \
    bash \
    git \
    openssl \
    mysql-client \
    tree  # <--- Ajout de tree pour lister les fichiers

# Development stage
FROM base AS development 

# D√©finir le r√©pertoire de travail
WORKDIR /app

# Copier les fichiers de d√©pendances pour optimiser le cache
COPY package*.json ./

# üìÇ Afficher la structure du dossier apr√®s la copie des packages
RUN echo "### Apr√®s COPY package*.json ###" && tree -a /app

# Configurer le registre npm
RUN npm config set registry https://registry.npmmirror.com/

# Installer les d√©pendances Node.js
RUN npm install

# üìÇ Afficher la structure apr√®s installation des d√©pendances
RUN echo "### Apr√®s npm install ###" && tree -a /app

# Copier tout le code source
COPY . .

# üìÇ Afficher la structure apr√®s copie du code source
RUN echo "### Apr√®s COPY . . ###" && tree -a /app

# D√©finir une variable d'environnement par d√©faut
ARG APP_ENV=development
ENV NODE_ENV=${APP_ENV}

# Construire l'application avec Nx
RUN npx nx run api:build

# üìÇ Afficher la structure apr√®s build Nx
RUN echo "### Apr√®s build Nx ###" && tree -a /app

# √âtape 2 : Production image
FROM base AS production 

# Installer les d√©pendances n√©cessaires avec apk
RUN apk add --no-cache bash openssl tree

# D√©finir une variable d'environnement
ARG APP_ENV=production
ENV NODE_ENV=${APP_ENV}

# D√©finir le r√©pertoire de travail
WORKDIR /app

# Copier les fichiers n√©cessaires depuis l'√©tape de d√©veloppement
COPY --from=development /app/package.json ./
COPY --from=development /app/package-lock.json ./
COPY --from=development /app/dist/apps/api ./dist

COPY --from=development /app/dist/apps/api ./dist/api
COPY --from=development /app/dist/apps/libs ./dist/libs


# üìÇ Afficher la structure apr√®s copie depuis le build
RUN echo "### Apr√®s COPY depuis l'√©tape de d√©veloppement ###" && tree -a /app

# Configurer le registre npm
RUN npm config set registry https://registry.npmmirror.com/

# Installer uniquement les d√©pendances de production
RUN npm install --production

# Copier et rendre le script `wait-for-db.sh` ex√©cutable
COPY wait-for-db.sh /wait-for-db.sh
RUN chmod +x /wait-for-db.sh

# Copier le fichier `.env` et lui attribuer les droits d'ex√©cution
COPY apps/api/.env /.env
RUN chmod +x /.env

# Installer des d√©pendances de d√©veloppement pour Typescript (si n√©cessaire √† l'ex√©cution)
RUN npm install -D ts-node typescript

# üìÇ Afficher la structure finale du conteneur production
RUN echo "### Structure finale de l'image production ###" && tree -a /

# Exposer les ports n√©cessaires
EXPOSE 3000 5555

# Commande par d√©faut pour d√©marrer l'application
CMD ["/wait-for-db.sh", "node", "dist/main.js"]
