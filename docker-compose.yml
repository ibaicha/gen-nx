# Define services
services:
  angular-app:
    container_name: angular-app-mysql
    restart: always
    build:
      context: .
      dockerfile: ./apps/angular/Dockerfile
    ports:
      - '8080:80' # Exposez l'application Angular sur le port 8080
    networks:
      - default
    depends_on:
      - nestjs-app

  nestjs-app:
    container_name: nestjs-app-mysql
    depends_on:
      - mysql-db
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    restart: unless-stopped
    ports:
      - '3000:3000'
    stdin_open: true
    env_file:
      - ./apps/api/.env
    tty: true
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules # Volume persistant pour node_modules
      - migrations:/usr/src/app/.migrations # Volume persistant pour le fichier de marquage
    networks:
      - default

  mysql-db:
    container_name: mysql-db
    platform: linux/amd64
    image: mysql:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: ${TZ}
    ports:
      - '3307:${MYSQL_PORT}'
    volumes:
      - db_data:/var/lib/mysql

    networks:
      - default

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin
    platform: linux/amd64
    depends_on:
      - mysql-db
    restart: unless-stopped
    environment:
      PMA_HOST: mysql-db
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - '8081:80'
    networks:
      - default

  prisma-studio:
    container_name: prisma-studio-mysql
    build:
      context: .
      dockerfile: ./apps/outils/Dockerfile
    restart: unless-stopped
    command:
      [
        'npx',
        'prisma',
        'studio',
        '--port',
        '5555',
        '--schema=./prisma/schema.prisma',
      ]
    ports:
      - '5555:5555'
    environment:
      DATABASE_URL: ${DATABASE_URL}

      

volumes:
  db_data:
  migrations:
