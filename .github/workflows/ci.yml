name: NX CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-api
  MYSQL_IMAGE: mysql:8.0
  PHPMYADMIN_IMAGE: phpmyadmin/phpmyadmin
  PRISMA_STUDIO_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-prisma-studio
  TAG: ${{ github.sha }}

jobs:
  setup:
    name: Setup NX Workspace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Nécessaire pour nx affected

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clean Install
        run: |
          # Nettoyer le cache npm
          npm cache clean --force
          
          # Installation propre des dépendances
          npm install --legacy-peer-deps --force
          npm install -g nx@latest @nrwl/cli@latest
          npm install -D jest jest-junit @types/jest ts-jest @nrwl/jest

      - name: Verify Installation
        run: |
          npx nx --version
          ls -la node_modules/@nrwl/
          npx nx report

      - name: Cache NX
        uses: actions/cache@v3
        with:
          path: |
            .nx/cache
            node_modules
          key: ${{ runner.os }}-nx-${{ hashFiles('package-lock.json') }}

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: nest_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run Tests
        run: |
          # Solution optimale avec nx affected
          npx nx affected:test \
            --base=main~1 \
            --head=main \
            --parallel=3 \
            --ci \
            --codeCoverage \
            --reporters=jest-junit,default \
            --skip-nx-cache || \
          
          # Fallback si nx affected échoue
          npx nx run-many --target=test --all --parallel=3 --ci --codeCoverage --reporters=jest-junit,default
        env:
          CI: true
          JEST_JUNIT_OUTPUT_DIR: ./test-results
          DATABASE_URL: mysql://root:root@localhost:3306/nest_db

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test-results/
            ./coverage/
          retention-days: 5

      - name: Upload to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/

  build-and-push:
    name: Build and Push
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/angular/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          build-args: |
            NODE_ENV=production
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate Compose File
        run: |
          cat <<EOF > docker-compose.prod.yml
          version: '3.8'
          services:
            frontend:
              image: ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
              ports: ["8080:80"]
              depends_on: [backend]
            
            backend:
              image: ${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
              environment:
                DATABASE_URL: mysql://\$DB_USER:\$DB_PASS@db:3306/\$DB_NAME
              ports: ["3000:3000"]
            
            db:
              image: ${{ env.MYSQL_IMAGE }}
              environment:
                MYSQL_ROOT_PASSWORD: \$DB_ROOT_PASS
                MYSQL_DATABASE: \$DB_NAME
                MYSQL_USER: \$DB_USER
                MYSQL_PASSWORD: \$DB_PASS
          EOF
      
      - name: Deploy Stack
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /app
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans