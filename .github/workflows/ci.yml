name: NX CI/CD Pipeline with Docker
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-api
  MYSQL_IMAGE: mysql:8.0
  PHPMYADMIN_IMAGE: phpmyadmin/phpmyadmin
  PRISMA_STUDIO_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-prisma-studio
  TAG: ${{ github.sha }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 20 # ou même 0 pour tout l'historique

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          # Install specific compatible versions
          npm install -D nx@21.0.3 @nx/workspace@21.0.3 @nx/devkit@21.0.3
          npm ci --legacy-peer-deps

          # Verify installation
          ls -la node_modules/
          npx nx --version

      - name: Cache node modules
        uses: actions/cache@v3
        id: node-cache
        with:
          path: |
            node_modules
            .angular/cache
            apps/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Verify Project Structure
        run: |
          ls -la
          ls -la apps/
          npx nx report

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: nest_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore Cache
        uses: actions/cache@v3
        id: restore-cache
        with:
          path: |
            node_modules
            .angular/cache
            apps/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies if Needed
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          npm install -D nx@21.0.3 @nx/workspace@21.0.3 @nx/devkit@21.0.3
          npm ci --legacy-peer-deps

      - name: Verify Dependencies
        run: |
          ls -la node_modules/
          npx nx --version

      - name: Run Tests Individually
        continue-on-error: true
        run: |
          echo "🧪 Running tests for shared-models..."
          npx nx run shared-models:test --ci --codeCoverage --reporters=jest-junit,default || echo "❌ shared-models:test failed"

          echo "🧪 Running tests for angular..."
          npx nx run angular:test --ci --codeCoverage --reporters=jest-junit,default || echo "❌ angular:test failed"

          echo "🧪 Running tests for api..."
          npx nx run api:test --ci --codeCoverage --reporters=jest-junit,default || echo "❌ api:test failed"

      - name: Show Test Output (if any failed)
        if: failure()
        run: |
          echo "=== JEST LOGS ==="
          find ./test-results -type f -exec echo ">>> {}" \; -exec cat {} \; || echo "No test results found"

        env:
          CI: true
          JEST_JUNIT_OUTPUT_DIR: ./test-results
          DATABASE_URL: mysql://root:root@localhost:3306/nest_db

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test-results/
            ./coverage/
          retention-days: 5

      - name: Upload Coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/
          fail_ci_if_error: false

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/angular/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          build-args: |
            NODE_ENV=production
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Prisma Studio (Production)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/prisma/Dockerfile
          push: true
          tags: |
            ${{ env.PRISMA_STUDIO_IMAGE }}:${{ env.TAG }}
            ${{ env.PRISMA_STUDIO_IMAGE }}:stable

          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ env.TAG }}
            org.opencontainers.image.licenses=MIT  # Si applicable
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: | # Authentification au registre Docker (ex: Docker Hub)
            DOCKERHUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKER_HUB_TOKEN }}

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Generate Production Compose File
        run: |
          cat <<EOF > docker-compose.prod.yml
          version: '3.8'

          services:
            angular-app:
              image: ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
              restart: always
              ports:
                - "8080:80"
              networks:
                - app-network

            nestjs-app:
              image: ${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
              restart: unless-stopped
              depends_on:
                mysql-db:
                  condition: service_healthy
              ports:
                - "3000:3000"
              environment:
                DATABASE_URL: mysql://\$MYSQL_USER:\$MYSQL_PASSWORD@mysql-db:3306/\$MYSQL_DATABASE
                NODE_ENV: production
              networks:
                - app-network

            mysql-db:
              image: ${{ env.MYSQL_IMAGE }}
              restart: unless-stopped
              environment:
                MYSQL_ROOT_PASSWORD: \$MYSQL_ROOT_PASSWORD
                MYSQL_DATABASE: \$MYSQL_DATABASE
                MYSQL_USER: \$MYSQL_USER
                MYSQL_PASSWORD: \$MYSQL_PASSWORD
              volumes:
                - mysql_data:/var/lib/mysql
              networks:
                - app-network

            phpmyadmin:
              image: ${{ env.PHPMYADMIN_IMAGE }}
              depends_on:
                mysql-db:
                  condition: service_healthy
              restart: unless-stopped
              environment:
                PMA_HOST: mysql-db
                MYSQL_ROOT_PASSWORD: \$MYSQL_ROOT_PASSWORD
              ports:
                - "8081:80"
              networks:
                - app-network

            prisma-studio:
              image: ${{ env.PRISMA_STUDIO_IMAGE }}:${{ env.TAG }}
              depends_on:
                mysql-db:
                  condition: service_healthy
              restart: unless-stopped
              environment:
                DATABASE_URL: mysql://\$MYSQL_USER:\$MYSQL_PASSWORD@mysql-db:3306/\$MYSQL_DATABASE
              ports:
                - "5555:5555"
              networks:
                - app-network

          volumes:
            mysql_data:

          networks:
            app-network:
              driver: bridge
          EOF

      - name: Install SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy Files to Server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/app/
          scp -o StrictHostKeyChecking=no .env.production ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/app/

      - name: Deploy Stack
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
          cd /app
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d --build --remove-orphans
          docker image prune -f
          EOF
