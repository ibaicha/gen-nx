name: CI/CD - Build with MySQL & phpMyAdmin

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MYSQL_HOST: mysql  # Nom du service GitHub
  MYSQL_PORT: 3306   # Port interne du conteneur
  EXTERNAL_PORT: 3307 # Port exposé sur l'hôte
  TZ: UTC

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'root' }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE || 'mydb' }}
          MYSQL_USER: ${{ secrets.MYSQL_USER || 'myuser' }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'mypass' }}
        ports:
          - ${{ env.EXTERNAL_PORT }}:3306
        options: >-
          --health-cmd="mysqladmin ping -u root -p$$MYSQL_ROOT_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
          - 8080:80
        environment:
          PMA_HOST: ${{ env.MYSQL_HOST }}
          PMA_PORT: ${{ env.MYSQL_PORT }}
          PMA_USER: ${{ secrets.MYSQL_USER || 'myuser' }}
          PMA_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'mypass' }}
        depends_on:
          mysql: 
            condition: service_healthy

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Load environment variables
        run: |
          echo "DATABASE_URL=mysql://${{ env.MYSQL_USER }}:${{ env.MYSQL_PASSWORD }}@${{ env.MYSQL_HOST }}:${{ env.MYSQL_PORT }}/${{ env.MYSQL_DATABASE }}" >> $GITHUB_ENV
          echo "MYSQL_EXTERNAL_PORT=${{ env.EXTERNAL_PORT }}" >> $GITHUB_ENV

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Verify MySQL connection
        run: |
          echo "Testing connection to MySQL at $MYSQL_HOST:$MYSQL_PORT"
          mysqladmin ping -h"$MYSQL_HOST" -P"$MYSQL_PORT" \
            -u"$MYSQL_USER" -p"$MYSQL_PASSWORD"

      - name: 🏗️ Run database migrations
        working-directory: ./apps/api
        run: |
          npx prisma migrate dev --name init
          npx prisma generate

      - name: 🧱 Build applications
        run: |
          npx nx build angular --configuration=production
          npx nx build api

      - name: 🐳 Build Docker images
        run: |
          docker build -f apps/angular/Dockerfile -t my-angular-app:$GITHUB_SHA .
          docker build -f apps/api/Dockerfile -t my-nestjs-api:$GITHUB_SHA .

      - name: 🧪 Run tests
        run: npx nx affected:test

      - name: 🌐 Display connection info
        run: |
          echo "MySQL accessible on port: $MYSQL_EXTERNAL_PORT"
          echo "phpMyAdmin available at: http://localhost:8080"
          echo "Database URL: $DATABASE_URL"

      - name: 🚀 Deploy (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deployment would happen here"
          # docker push my-angular-app:$GITHUB_SHA
          # docker push my-nestjs-api:$GITHUB_SHA


      # (Optionnel) Login + Push vers Docker Hub
      # - name: 🔑 Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: 📤 Push Angular Image
      #   run: docker tag my-angular-app:ci yourdockerhubuser/angular-app:latest && docker push yourdockerhubuser/angular-app:latest

      # - name: 📤 Push NestJS Image
      #   run: docker tag my-nestjs-app:ci yourdockerhubuser/nestjs-app:latest && docker push yourdockerhubuser/nestjs-app:latest

      # - name: 📤 Push Prisma Studio Image
      #   run: docker tag prisma-studio:ci yourdockerhubuser/prisma-studio:latest && docker push yourdockerhubuser/prisma-studio:latest

      # - name: 📤 Push phpMyAdmin Image
      #   run: docker tag phpmyadmin:ci yourdockerhubuser/phpmyadmin:latest && docker push yourdockerhubuser/phpmyadmin:latest
