name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-api
  MYSQL_IMAGE: mysql:8.0
  PHPMYADMIN_IMAGE: phpmyadmin/phpmyadmin
  PRISMA_STUDIO_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-prisma-studio
  TAG: ${{ github.sha }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: nest_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run API unit tests
        working-directory: apps/api
        run: npm run test:ci
      
      - name: Run API e2e tests
        working-directory: apps/api
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/nest_db
        run: npm run test:e2e
      
      - name: Run Angular tests
        working-directory: apps/angular
        run: npm run test:ci

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push Angular
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/angular/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
      
      - name: Build and push NestJS
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          build-args: |
            NODE_ENV=production
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
      
      - name: Build and push Prisma Studio
        uses: docker/build-push-action@v5
        with:
          context: apps/api
          push: true
          tags: ${{ env.PRISMA_STUDIO_IMAGE }}:latest,${{ env.PRISMA_STUDIO_IMAGE }}:${{ env.TAG }}
          target: development
          build-args: |
            NODE_ENV=development
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate production compose file
        run: |
          cat <<EOF > docker-compose.prod.yml
          version: '3.8'

          services:
            angular-app:
              image: ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
              restart: always
              ports:
                - "8080:80"
              networks:
                - app-network

            nestjs-app:
              image: ${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
              restart: unless-stopped
              depends_on:
                - mysql-db
              ports:
                - "3000:3000"
              environment:
                DATABASE_URL: mysql://\$MYSQL_USER:\$MYSQL_PASSWORD@mysql-db:3306/\$MYSQL_DATABASE
                NODE_ENV: production
              networks:
                - app-network

            mysql-db:
              image: ${{ env.MYSQL_IMAGE }}
              restart: unless-stopped
              environment:
                MYSQL_ROOT_PASSWORD: \$MYSQL_ROOT_PASSWORD
                MYSQL_DATABASE: \$MYSQL_DATABASE
                MYSQL_USER: \$MYSQL_USER
                MYSQL_PASSWORD: \$MYSQL_PASSWORD
              volumes:
                - mysql_data:/var/lib/mysql
              networks:
                - app-network

            phpmyadmin:
              image: ${{ env.PHPMYADMIN_IMAGE }}
              depends_on:
                - mysql-db
              restart: unless-stopped
              environment:
                PMA_HOST: mysql-db
                MYSQL_ROOT_PASSWORD: \$MYSQL_ROOT_PASSWORD
              ports:
                - "8081:80"
              networks:
                - app-network

            prisma-studio:
              image: ${{ env.PRISMA_STUDIO_IMAGE }}:${{ env.TAG }}
              depends_on:
                - mysql-db
              restart: unless-stopped
              environment:
                DATABASE_URL: mysql://\$MYSQL_USER:\$MYSQL_PASSWORD@mysql-db:3306/\$MYSQL_DATABASE
              ports:
                - "5555:5555"
              command: ["npx", "prisma", "studio", "--port", "5555"]
              networks:
                - app-network

          volumes:
            mysql_data:

          networks:
            app-network:
              driver: bridge
          EOF
      
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Copy files to server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/app/
          scp -o StrictHostKeyChecking=no .env.production ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/app/
      
      - name: Deploy stack
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
          cd /app
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d --remove-orphans
          EOF
