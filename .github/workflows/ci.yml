name: NX CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-api
  MYSQL_IMAGE: mysql:8.0
  PHPMYADMIN_IMAGE: phpmyadmin/phpmyadmin
  PRISMA_STUDIO_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/gen-nx-prisma-studio
  TAG: ${{ github.sha }}

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Nx + Dependencies
        run: |
          npm install -D nx@21.0.3 @nx/workspace@21.0.3 @nx/devkit@21.0.3
          npm ci --legacy-peer-deps

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .angular/cache
            apps/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: nest_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .angular/cache
            apps/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: |
          npm install -D nx@21.0.3 @nx/workspace@21.0.3 @nx/devkit@21.0.3
          npm ci --legacy-peer-deps

      - name: Run Tests
        continue-on-error: true
        run: |
          npx nx run shared-models:test || echo "‚ùå shared-models:test failed"
          npx nx run angular:test || echo "‚ùå angular:test failed"
          npx nx run api:test || echo "‚ùå api:test failed"

        env:
          CI: true
          DATABASE_URL: mysql://root:root@localhost:3306/nest_db

      - name: Upload Coverage & Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results/
        retention-days: 7

      - name: Upload to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/

  build-and-push:
    name: Build & Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build & Push Angular
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/angular/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Build & Push NestJS API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
          build-args: |
            NODE_ENV=production
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Build & Push Prisma Studio
        uses: docker/build-push-action@v5
        with:
          context: apps/api
          file: Dockerfile
          push: true
          tags: ${{ env.PRISMA_STUDIO_IMAGE }}:latest,${{ env.PRISMA_STUDIO_IMAGE }}:${{ env.TAG }}
          target: development
          build-args: |
            NODE_ENV=development

  deploy:
    name: Deploy to VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy docker-compose.prod.yml
        run: |
          echo "üîß G√©n√©ration du fichier docker-compose.prod.yml"
          cat <<EOF > docker-compose.prod.yml
          version: '3.8'
          services:
            angular-app:
              image: ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
              ports: ["8080:80"]
              restart: always
              networks: [app-network]

            nestjs-app:
              image: ${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
              ports: ["3000:3000"]
              restart: unless-stopped
              environment:
                DATABASE_URL: mysql://\$MYSQL_USER:\$MYSQL_PASSWORD@mysql-db:3306/\$MYSQL_DATABASE
                NODE_ENV: production
              depends_on:
                mysql-db:
                  condition: service_healthy
              networks: [app-network]

            mysql-db:
              image: ${{ env.MYSQL_IMAGE }}
              environment:
                MYSQL_ROOT_PASSWORD: \$MYSQL_ROOT_PASSWORD
                MYSQL_DATABASE: \$MYSQL_DATABASE
                MYSQL_USER: \$MYSQL_USER
                MYSQL_PASSWORD: \$MYSQL_PASSWORD
              volumes:
                - mysql_data:/var/lib/mysql
              networks: [app-network]

            phpmyadmin:
              image: ${{ env.PHPMYADMIN_IMAGE }}
              ports: ["8081:80"]
              depends_on:
                mysql-db:
                  condition: service_healthy
              environment:
                PMA_HOST: mysql-db
                MYSQL_ROOT_PASSWORD: \$MYSQL_ROOT_PASSWORD
              networks: [app-network]

            prisma-studio:
              image: ${{ env.PRISMA_STUDIO_IMAGE }}:${{ env.TAG }}
              ports: ["5555:5555"]
              environment:
                DATABASE_URL: mysql://\$MYSQL_USER:\$MYSQL_PASSWORD@mysql-db:3306/\$MYSQL_DATABASE
              depends_on:
                mysql-db:
                  condition: service_healthy
              networks: [app-network]

          volumes:
            mysql_data:

          networks:
            app-network:
              driver: bridge
          EOF

      - name: Copier sur le VPS
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/app/
          scp -o StrictHostKeyChecking=no .env.production ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/app/.env

      - name: Lancer le d√©ploiement distant
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
          cd /app
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d --build --remove-orphans
          docker image prune -f
          EOF
