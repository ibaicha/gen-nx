name: CI  # Nom du workflow GitHub Actions

on:
  push:
    branches:
      - master  # Déclencheur sur push vers master
  pull_request:  # Déclencheur aussi sur les pull requests
  workflow_dispatch:  # Déclenchement manuel via l'interface GitHub

permissions:
  actions: read   # Accès en lecture seule aux métadonnées des actions
  contents: read  # Accès en lecture seule aux contenus du dépôt
  pull-requests: write  # 🔁 Autorise la publication de commentaires dans les PR

jobs:
  main:
    runs-on: ${{ matrix.os }}
    env:
      NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}  # Exécute dynamiquement sur les OS définis ci-dessous

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]  # Matrice des OS
      max-parallel: 3 # Limite le nombre de jobs simultanés à 3

    steps:
      - name: Récupération du dépôt
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Mise en cache de node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Installation des dépendances
        run: |
          echo "📦 Installation des dépendances..."
          npm ci --legacy-peer-deps
          echo "✅ Dépendances installées"

      - name: Définir les SHAs Nx
        uses: nrwl/nx-set-shas@v4

      - name: Exécuter le Lint
        run: |
          echo "🔍 Lint des projets affectés..."
          npx nx affected --target=lint
          echo "✅ Lint terminé"

      - name: Tests unitaires
        run: |
          echo "🧪 Lancement des tests unitaires..."
          npx nx affected --target=test
          echo "✅ Tests terminés"

      - name: Compilation des projets affectés
        run: |
          echo "🏗️ Compilation des projets..."
          npx nx affected --target=build
          echo "✅ Build terminé"
        timeout-minutes: 30

      - name: Génération du graphe de dépendances
        run: |
          echo "📊 Génération du graphe des dépendances..."
          npx nx dep-graph --file=dist/graph.html
          echo "✅ Graphe généré"

      - name: Applications affectées
        run: |
          echo "📦 Liste des applications affectées :"
          npx nx show projects --affected --type=app

      - name: Librairies affectées
        run: |
          echo "📚 Liste des librairies affectées :"
          npx nx show projects --affected --type=lib

      - name: Déploiement des projets affectés
        run: |
          echo "🚀 Déploiement en cours..."
          npx nx affected --target=deploy
          echo "✅ Déploiement terminé"

      - name: Tests avec couverture
        run: |
          echo "📈 Tests avec génération de couverture..."
          npx nx affected --target=test --coverage

      - name: Compilation d'un projet spécifique
        run: |
          echo "🔧 Build du projet spécifique..."
          npx nx build my-fullstack-app

      - name: Génération du timestamp
        run: echo "timestamp=$(date +%s)" >> "$GITHUB_ENV"

      - name: Téléverser l'artefact de build
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ env.timestamp }}
          path: apps/my-fullstack-app/dist

      - name: Téléverser le graphe de dépendances
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-graph-${{ env.timestamp }}
          path: dist/**/*

      - name: Résumé Markdown visuel
        run: |
          echo "## ✅ Résumé de l'exécution du workflow" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Dépendances installées" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Lint terminé" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Tests OK" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build effectué" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 Couverture générée" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Graphe de dépendances prêt" >> $GITHUB_STEP_SUMMARY

      - name: Commentaire automatique dans la PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🔁 Résultats CI
            ✅ Lint, build et tests passés avec succès.
            📊 [Télécharger le graphe de dépendances](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) dans les artefacts.
