name: CI/CD - Build with MySQL & phpMyAdmin

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MYSQL_HOST: 127.0.0.1  # Doit être localhost pour l'hôte GitHub
  CONTAINER_MYSQL_HOST: mysql  # Nom du service pour la communication entre conteneurs
  MYSQL_PORT: 3307
  PMA_PORT: 8080

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'root' }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE || 'mydb' }}
          MYSQL_USER: ${{ secrets.MYSQL_USER || 'myuser' }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'mypass' }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -uroot -p$$MYSQL_ROOT_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker network
        id: network
        run: |
          NETWORK_NAME="ci-network-$GITHUB_RUN_ID"
          echo "network_name=${NETWORK_NAME}" >> $GITHUB_OUTPUT
          docker network create ${NETWORK_NAME}

      - name: 🐳 Start MySQL container
        run: |
          docker run -d \
            --name mysql \
            --network ${{ steps.network.outputs.network_name }} \
            -e MYSQL_ROOT_PASSWORD=${{ env.MYSQL_ROOT_PASSWORD }} \
            -e MYSQL_DATABASE=${{ env.MYSQL_DATABASE }} \
            -e MYSQL_USER=${{ env.MYSQL_USER }} \
            -e MYSQL_PASSWORD=${{ env.MYSQL_PASSWORD }} \
            -p 3306:3306 \
            mysql:8.0

      - name: 🐳 Start phpMyAdmin container
        run: |
          docker run -d \
            --name phpmyadmin \
            --network ${{ steps.network.outputs.network_name }} \
            -e PMA_HOST=mysql \
            -e PMA_PORT=3306 \
            -e PMA_USER=${{ env.MYSQL_USER }} \
            -e PMA_PASSWORD=${{ env.MYSQL_PASSWORD }} \
            -p ${{ env.PMA_PORT }}:80 \
            phpmyadmin/phpmyadmin

      - name: 🧪 Verify containers
        run: |
          docker ps
          echo "phpMyAdmin available at: http://localhost:${{ env.PMA_PORT }}"
          echo "MySQL available at: ${{ env.MYSQL_HOST }}:${{ env.MYSQL_PORT }}"

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Test MySQL connection
        run: |
          for i in {1..5}; do
            if mysqladmin ping -h"${{ env.MYSQL_HOST }}" -P"${{ env.MYSQL_PORT }}" \
               -u"${{ env.MYSQL_USER }}" -p"${{ env.MYSQL_PASSWORD }}"; then
              echo "✅ MySQL is ready!"
              break
            else
              echo "⌛ Waiting for MySQL ($i/5)..."
              sleep 5
            fi
          done

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker stop mysql phpmyadmin || true
          docker rm mysql phpmyadmin || true
          docker network rm ${{ steps.network.outputs.network_name }} || true

      # (Optionnel) Login + Push vers Docker Hub
      # - name: 🔑 Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: 📤 Push Angular Image
      #   run: docker tag my-angular-app:ci yourdockerhubuser/angular-app:latest && docker push yourdockerhubuser/angular-app:latest

      # - name: 📤 Push NestJS Image
      #   run: docker tag my-nestjs-app:ci yourdockerhubuser/nestjs-app:latest && docker push yourdockerhubuser/nestjs-app:latest

      # - name: 📤 Push Prisma Studio Image
      #   run: docker tag prisma-studio:ci yourdockerhubuser/prisma-studio:latest && docker push yourdockerhubuser/prisma-studio:latest

      # - name: 📤 Push phpMyAdmin Image
      #   run: docker tag phpmyadmin:ci yourdockerhubuser/phpmyadmin:latest && docker push yourdockerhubuser/phpmyadmin:latest
